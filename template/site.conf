fastcgi_cache_path /var/run/nginx-cache levels=1:2 keys_zone=FASTCGICACHE:500m inactive=60m;

server {
    listen 80;
    listen [::]:80;
    server_name ${DOMAIN} www.${DOMAIN};
    server_tokens off;
    include letsencrypt.conf;
    location / {
        return 301 https://${DOMAIN}$request_uri;
    }
}

server {
    # Don't upgrade requests to HTTP/2 since all we do is return a redirect response to a different domain.
    listen 443 ssl;
    listen [::]:443 ssl;
    server_name www.${DOMAIN};
    server_tokens off;
    charset utf-8;
    # SSL Configuration
    ssl_certificate /etc/letsencrypt/live/${DOMAIN}/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/${DOMAIN}/privkey.pem;
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:50m;
    ssl_session_tickets off;
    # Modern Cryptography Configuration
    ssl_protocols TLSv1.2;
    ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256';
    ssl_prefer_server_ciphers on;
    # OCSP Stapling (Certificate Revocation Check, and cache it)
    ssl_stapling on;
    ssl_stapling_verify on;
    ## Verify chain of trust of OCSP response using Root Certificate Authority and Intermediate certificates
    #ssl_trusted_certificate /path/to/root_CA_cert_plus_intermediates.crt;
    ## Use Cloudflare's secure name servers, with a fallback to Google.
    resolver 1.1.1.1 8.8.8.8;
    ## The following is for forward-secrecy between server and client so that previous requests cannot be decrypted even
    ## if the servers private keys get compromised in the future. This file is not generated by default and must be done
    ## manually (uncomment ssl_dhparam once complete):
    ##    [sudo] openssl dhparam -out /etc/nginx/dhparam.pem 4096
    ssl_dhparam /etc/nginx/dhparam.pem;
    ## Security Headers
    add_header X-XSS-Protection "1; mode=block";
    add_header X-Frame-Options SAMEORIGIN;
    ## The following header is DANGEROUS. Once set, browsers will refuse to serve over non-SSL HTTP. It's like a 301
    ## redirect that never goes away.
    #add_header Strict-Transport-Security "max-age=15768000; includeSubDomains" always;
    include letsencrypt.conf;
    location / {
        return 301 https://${DOMAIN}$request_uri;
    }
}

server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name ${DOMAIN};
    server_tokens off;
    charset utf-8;
    # SSL Configuration
    ssl_certificate /etc/letsencrypt/live/${DOMAIN}/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/${DOMAIN}/privkey.pem;
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:50m;
    ssl_session_tickets off;
    # Modern Cryptography Configuration
    ssl_protocols TLSv1.2;
    ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256';
    ssl_prefer_server_ciphers on;
    # OCSP Stapling (Certificate Revocation Check, and cache it)
    ssl_stapling on;
    ssl_stapling_verify on;
    ## Verify chain of trust of OCSP response using Root Certificate Authority and Intermediate certificates
    #ssl_trusted_certificate /path/to/root_CA_cert_plus_intermediates.crt;
    ## Use Cloudflare's secure name servers, with a fallback to Google.
    resolver 1.1.1.1 8.8.8.8;
    ## The following is for forward-secrecy between server and client so that previous requests cannot be decrypted even
    ## if the servers private keys get compromised in the future. This file is not generated by default and must be done
    ## manually (uncomment ssl_dhparam once complete):
    ##    [sudo] openssl dhparam -out /etc/nginx/dhparam.pem 4096
    ssl_dhparam /etc/nginx/dhparam.pem;
    ## Security Headers
    add_header X-XSS-Protection "1; mode=block";
    add_header X-Frame-Options SAMEORIGIN;
    ## The following header is DANGEROUS. Once set, browsers will refuse to serve over non-SSL HTTP. It's like a 301
    ## redirect that never goes away.
    #add_header Strict-Transport-Security "max-age=15768000; includeSubDomains" always;
    include letsencrypt.conf;

    root /var/www/${DOMAIN}/www;
    index index.php index.html index.htm;
    autoindex off;

    access_log /var/www/${DOMAIN}/logs/http-access.log combined;
    error_log /var/www/${DOMAIN}/logs/http-error.log warn;

    # Block access to "hidden" files and directories whose names begin with a
    # period. This includes directories used by version control systems such
    # as Subversion or Git to store control files.
    location ~ '(^|/)\.' {
        deny all;
    }
    # But allow "Well-Known URIs" as per RFC 5785.
    location ~* ^/.well-known/ {
        allow all;
    }

    location / {
        ## Push any resources listed in the Link header before the browser has requested it to speed up on HTTP/2.
        ## Available on Nginx v1.13.9+
        #http2_push_preload on;
        try_files $uri $uri/ /index.php$is_args$args;
    }

    ## FastCGI Caching
    set $no_cache 0;
    # POST requests and URLs with a query string should always go to PHP.
    if ($request_method = POST) {
            set $no_cache 1;
    }
    if ($query_string != "") {
            set $no_cache 1;
    }
    location ~ '[^/]\.php(/|\?|$)' {
        fastcgi_split_path_info '^(.+?\.php)(/.*)$';
        if (!-f $document_root$fastcgi_script_name) {
            return 404;
        }
        try_files $uri $fastcgi_script_name =404;
        fastcgi_index index.php;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        # You have to specify the HTTPS FCGI param. Some old software only
        # understand Apache-specific conventions.
        # These two param declarations (plus the variable map) should be
        # enough to detect if SSL was enabled at some point in the proxy.
        fastcgi_param HTTPS $fastcgi_https if_not_empty;
        fastcgi_param HTTPS $https if_not_empty;
        fastcgi_intercept_errors on;
        fastcgi_buffer_size 512k;
        fastcgi_buffers 1024 16k;
        fastcgi_busy_buffers_size 512k;
        fastcgi_temp_file_write_size 512k;
        fastcgi_read_timeout 300;
        include fastcgi_params;
        fastcgi_pass phpfpm;

        fastcgi_cache_bypass $no_cache;
        fastcgi_no_cache $no_cache;
        fastcgi_cache FASTCGICACHE;
        fastcgi_cache_valid 200 5m;
    }

    location = /favicon.ico {
        log_not_found off;
        access_log off;
    }

    location = /robots.txt {
        allow all;
        try_files $uri $uri/ /index.php$is_args$args @robots;
        log_not_found off;
        access_log off;
    }
    # Fallback in case robots.txt doesn't exist.
    location @robots {
        return 200 "User-agent: *\nAllow: *\n";
    }

    location ~* \.(js|css|png|jpg|jpeg|gif|ico)$ {
        expires max;
        log_not_found off;
    }

    ### =================================== ###
    ### CUSTOM SITE CONFIGURATION GOES HERE ###
    ### =================================== ###

}
